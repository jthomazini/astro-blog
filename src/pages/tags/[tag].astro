---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../components/BlogPost.astro';

// export async function getStaticPaths() {
// 	const allPosts = await Astro.glob('../posts/*.md');

// 	return [
// 		{ params: { tag: 'astro' }, props: { posts: allPosts } },
// 		{ params: { tag: 'successes' }, props: { posts: allPosts } },
// 		{ params: { tag: 'community' }, props: { posts: allPosts } },
// 		{ params: { tag: 'blogging' }, props: { posts: allPosts } },
// 		{ params: { tag: 'setbacks' }, props: { posts: allPosts } },
// 		{ params: { tag: 'learning in public' }, props: { posts: allPosts } },
// 	];
// }

// export async function getStaticPaths() {
// 	const allPosts = await Astro.glob('../posts/*.md');
// 	const tags = ['astro', 'successes', 'community', 'blogging', 'setbacks', 'learning in public'];
// 	return tags.map((tag) => ({
// 		params: { tag: tag },
// 		props: { posts: allPosts.filter((post) => post.frontmatter.tags?.includes(tag)) },
// 	}));
// }

export async function getStaticPaths() {
	// Fetch all Markdown posts
	const allPosts = await Astro.glob('../posts/*.md');

	// const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
	// Use flatMap to simplify mapping and flattening in case some posts might not have tags defined
	const tags = [...new Set(allPosts.flatMap((post) => post.frontmatter.tags || []))];

	// // Extract unique tags from all posts
	// const tags = new Set();
	// allPosts.forEach((post) => {
	// 	if (post.frontmatter.tags) {
	// 		post.frontmatter.tags.forEach((tag) => tags.add(tag));
	// 	}
	// });

	return tags.map((tag) => {
		const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
		return {
			params: { tag },
			props: { posts: filteredPosts },
		};
	});

	// // Generate paths for each tag with corresponding posts
	// const paths = Array.from(tags).map((tag) => {
	// 	return {
	// 		params: { tag: tag },
	// 		props: { posts: allPosts.filter((post) => post.frontmatter.tags?.includes(tag)) },
	// 	};
	// });
	// return paths;
}

const { tag } = Astro.params;
const { posts } = Astro.props;
// const filteredPosts = posts.filter((post) => post.frontmatter.tags?.includes(tag));
---

<BaseLayout pageTitle={tag}>
	<p>Posts tagged with {tag}</p>
	<ul>
		<!-- {filteredPosts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title} />)} -->

		{posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title} />)}
	</ul></BaseLayout
>
